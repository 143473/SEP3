@page "/CreateGame"

@using Microsoft.AspNetCore.Components
@using PresentationTier.Authentication
@using PresentationTier.Data.GameServices.Games
@using PresentationTier.Models

@inject NavigationManager navigationManager
@inject AuthenticationStateProvider stateProvider
@inject IGameService gameService

<h3>Create Game</h3>
<EditForm Model="@game" OnValidSubmit="@CreateGameAsync">
    <DataAnnotationsValidator/>
    <ValidationSummary/>
    <div class="form-group">
        *Name:<br/>
        <InputText @bind-Value="game.Name"/>
    </div>
    <div class="form-group">
        *Complexity: 
        <InputNumber @bind-Value="game.Complexity" style="width: 50px"/>
    </div>
    <div class="form-group">
        *Estimated time: 
        <InputNumber @bind-Value="game.TimeEstimation" style="width: 50px"/>
    </div>
    <div class="form-group">
        *Player amount:<br/>
        Min: <InputNumber @bind-Value="game.MinNumberOfPlayers" style="width: 50px"/>
        Max: <InputNumber @bind-Value="game.MaxNumberOfPlayers" style="width: 50px"/>
    </div>
    <div class="form-group">Short Description:<br/>
        <InputTextArea @bind-Value="game.ShortDescription" style="width: 250px"/>
    </div>
    <div class="form-group">
        Needed equipment:<br/>
        <InputTextArea @bind-Value="game.NeededEquipment" style="width: 250px"/>
    </div>
    <div class="form-group">
        Age range:<br/>
        Min: <InputNumber @bind-Value="game.MinAge" style="width: 50px"/>
        Max: <InputNumber @bind-Value="game.MaxAge" style="width: 50px"/>
    </div>
    <div class="form-group">
        Tutorial:<br/> 
        <InputText @bind-Value="game.Tutorial" style="width: 250px"/>
    </div>
    
    <p class="actions">
        <button type="submit" class="btn btn-outline-success">Create</button>
    </p>
</EditForm>

@code {
    private readonly Game game = new();
    private int role;
    
    private async Task CreateGameAsync()
    {
        role = Convert.ToInt32(((CustomAuthenticationStateProvider) stateProvider).GetAuthenticationStateAsync().Result.User.FindFirst(claim => claim.Type.Equals("Level"))?.Value);
        if (role == 1)
        {
            await gameService.CreateGameAsync(game);
            navigationManager.NavigateTo("GGL");
        }
        else
        {
            await gameService.SuggestGameAsync(game);
            navigationManager.NavigateTo("EditGameList");
        }
    } 
}
