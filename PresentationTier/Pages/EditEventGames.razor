@page "/EditEventGames/{eventId:int}"

@using PresentationTier.Models
@using PresentationTier.Authentication
@using System.Security.Claims
@using PresentationTier.Data.EventServices.EventGameLists
@using PresentationTier.Data.GameServices.GameLists

@inject IGameListService gameListService
@inject IEventGameListService eventGameListService
@inject AuthenticationStateProvider stateProvider
@inject NavigationManager navigationManager

<AuthorizeView Policy="Organizer">
    <Authorized>
        <h2>Edit Event Games</h2>

        @if (gameList == null)
        {
            <p>
                <em>Loading...</em>
            </p>
        }
        else if (!gameList.Any())
        {
            <p>
                <em>No ToDo items exist. Please add some.</em>
            </p>
        }
        else
        {
            <table class="table">
                <tbody>
                @foreach (var item in gameList)
                {
                    <tr>
                        <td>
                            <input type="checkbox" checked=@(gamesInEvent.FirstOrDefault(game => game.Id == item.Id) != null) @onchange="@(arg => CompletedChangeAsync(arg, item.Id))"/>
                        </td>
                        <td @onclick="@(() => MoreGameInfo(item.Id))" href="#">@item.Name</td>
                    </tr>
                }
                </tbody>
            </table>
        }

        <p class="actions">
            <button @onclick="@GoBack" class="button simple-button" type="submit">
                Go back
            </button>
        </p>

    </Authorized>
    <NotAuthorized>
        @{
            NavigateHome();
        }
        ;
    </NotAuthorized>
</AuthorizeView>

@code {

    [Parameter]
    public int EventId { get; set; }

    private IList<Game> gameList;
    private IList<Game> gamesInEvent;
    private string username;

    protected override async Task OnInitializedAsync()
    {
        username = ((CustomAuthenticationStateProvider) stateProvider).GetAuthenticationStateAsync().Result.User.FindFirst(claim => claim.Type.Equals(ClaimTypes.Name))?.Value;
        gameList = await gameListService.GetUserGamesAsync(username);
        gamesInEvent = await eventGameListService.GetAllEventGameListAsync(EventId);
    }

    private async Task CompletedChangeAsync(ChangeEventArgs arg, int gameId)
    {
        var inList = arg.Value != null && (bool) arg.Value;
        await eventGameListService.EditEventGamesAsync(username, gameId, EventId, inList);
    }

    private void MoreGameInfo(int gameId)
    {
        navigationManager.NavigateTo($"GameInfo/{gameId}");
    }

    private void GoBack()
    {
        navigationManager.NavigateTo($"EventInfo/{EventId}");
    }

    private void NavigateHome()
    {
        navigationManager.NavigateTo("/");
    }

}