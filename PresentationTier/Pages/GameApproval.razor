@page "/GameApproval/{Id:int}"

@using PresentationTier.Models
@using PresentationTier.Data

@inject NavigationManager navigationManager
@inject IGameService gameService
@inject IJSRuntime jsRuntime

<h3>Game Approval</h3>
<EditForm Model="@game" OnValidSubmit="@ApprovalAsync">
    <DataAnnotationsValidator/>
    <ValidationSummary/>
    <div class="form-group">
        Name:<br/>
        <InputText @bind-Value="game.Name"/>
    </div>
    <div class="form-group">
        Complexity:
        <InputNumber @bind-Value="game.Complexity" style="width: 50px"/>
    </div>
    <div class="form-group">
        Estimated time:
        <InputNumber @bind-Value="game.TimeEstimation" style="width: 50px"/>
    </div>
    <div class="form-group">
        Player amount:<br/>
        Min: <InputNumber @bind-Value="game.MinNumberOfPlayers" style="width: 50px"/>
        Max: <InputNumber @bind-Value="game.MaxNumberOfPlayers" style="width: 50px"/>
    </div>
    <div class="form-group">
        Short Description:
        <br/>
        <InputTextArea @bind-Value="game.ShortDescription" style="width: 250px"/>
    </div>
    <div class="form-group">
        Needed equipment:<br/>
        <InputTextArea @bind-Value="game.NeededEquipment" style="width: 250px"/>
    </div>
    <div class="form-group">
        Age range:<br/>
        Min: <InputNumber @bind-Value="game.MinAge" style="width: 50px"/>
        Max: <InputNumber @bind-Value="game.MaxAge" style="width: 50px"/>
    </div>
    <div class="form-group">
        Tutorial:<br/>
        <InputText @bind-Value="game.Tutorial" style="width: 250px"/>
    </div>
    
    <br/>
    
    <p class="actions">
        <button type="button" class="btn btn-primary" @onclick="ApproveAsync">Approve</button>
        <button type="button" class="btn btn-danger" @onclick="DisapproveAsync">Disapprove</button>
    </p>
</EditForm>


@code {
    [Parameter]
    public int Id { get; set; }

    private bool approval;
    private Game game = new();
    
    protected override async Task OnInitializedAsync()
    {
        game = await gameService.GetGameAsync(Id);
    }

    private async Task ApprovalAsync()
    {
        if (approval)
        {
            await gameService.UpdateGameApprovalAsync(game);
            navigationManager.NavigateTo("RequestsForGGL");
        }
        else
        {
            if (!await jsRuntime.InvokeAsync<bool>("confirm", "Are you sure you wish to disapprove this game?"))
                return;
            await gameService.RemoveGameAsync(game);
            navigationManager.NavigateTo("RequestsForGGL");
        }
    }

    private async Task ApproveAsync()
    {
        approval = true;
        await ApprovalAsync();
    }
    
    private async Task DisapproveAsync()
    {
        approval = false;
        await ApprovalAsync();
    }
}