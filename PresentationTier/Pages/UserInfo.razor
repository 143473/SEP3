@page "/UserInfo/{Username}"
@using PresentationTier.Models
@using PresentationTier.Data.UserServices

@inject IUserService userService
@inject IJSRuntime jsRuntime
@inject NavigationManager navigationManager

<AuthorizeView>
    <Authorized>
        @if (user == null)
        {
            <p>Loading...</p>
        }
        else
        {
            <h3>@user.Username</h3>
            @if (user.FirstName != null && user.LastName != null)
            {
                <p>Name: @(user.FirstName ?? "") @(user.LastName ?? "")</p>
            }
            <p>Role: @(user.Role == 3 ? "Organizer" : (user.Role == 2 ? "Player" : "Administrator"))</p>
            @if (user.PhoneNumber != null)
            {
                <p>Phone: @(user.PhoneCountryCode ?? "") @user.PhoneNumber</p>
            }
            @if (user.EmailAddress != null)
            {
                <p>Email: @user.EmailAddress</p>
            }
    
            <AuthorizeView Policy="Administrator" Context="additionalAuthentication1">
                @if (user.RequestedPromotion)
                {
                    <h3>Request for organizer</h3>
                    <p class="actions">
                        <button class="button simple-button" type="submit" @onclick="@AcceptPromotionAsync">Accept</button>
                    </p>
                    <p class="actions">
                        <button class="button delete-button" type="submit" @onclick="@DeclinePromotionAsync">Decline</button>
                    </p>
                }

            </AuthorizeView>
        }
        <AuthorizeView Policy="Administrator" Context="additionalAuthentication2">
            <p class="actions">
                <button class="button delete-button" type="submit" @onclick="@DeleteAccountAsync">Delete account</button>
            </p>
        </AuthorizeView>
    </Authorized>
    <NotAuthorized>
        @{
            NavigateHome();
        }
        ;
    </NotAuthorized>
</AuthorizeView>

@code {
    [Parameter]
    public string Username { get; set; }
    private User user;
    protected override async Task OnInitializedAsync()
    {
        await UpdateUserAsync();
    }

    private async Task AcceptPromotionAsync()
    {
        await userService.AcceptPromotionAsync(Username);
        await UpdateUserAsync();
    }

    private async Task DeclinePromotionAsync()
    {
        await userService.DeclinePromotionAsync(Username);
        await UpdateUserAsync();
    }

    private async Task UpdateUserAsync()
    {
        user = await userService.GetUserByUsernameAsync(Username);
    }
    private async Task DeleteAccountAsync()
    {
        if (!await jsRuntime.InvokeAsync<bool>("confirm","Are you sure you want to delete this account?"))
            return;
        await userService.DeleteAccountAsync(Username);
        navigationManager.NavigateTo("/AllUsers");
    }
    
    private void NavigateHome()
    {
        navigationManager.NavigateTo("/");
    }

}