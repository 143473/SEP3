@page "/ManageAccount"

@using PresentationTier.Authentication
@using System.Security.Claims
@using PresentationTier.Data.UserServices
@using PresentationTier.Models

@inject IUserService userService
@inject AuthenticationStateProvider stateProvider
@inject IJSRuntime jsRuntime
@inject NavigationManager navigationManager

<h2>Manage Account</h2>
@if (user == null)
{
    <p>Loading...</p>
}
else
{
    <h3>@user.Username</h3>
    @if (user.FirstName != null && user.LastName != null)
    {
        <p>Name: @(user.FirstName ?? "") @(user.LastName ?? "")</p>
    }
    <p>Role: @(user.Role == 3 ? "Organizer" : "Player")</p>
    @if (user.PhoneNumber != null)
    {
        <p>Phone: @(user.PhoneCountryCode ?? "") @user.PhoneNumber</p>
    }
    @if (user.EmailAddress != null)
    {
        <p>Email: @user.EmailAddress</p>
    }
    <p class="actions">
        <button class="button simple-button" type="submit" @onclick="@Edit">Edit</button>
    </p>

    <p class="actions">
        <button class="button delete-button" type="submit" @onclick="@DeleteAccountAsync">Delete account</button>
    </p>
}

<AuthorizeView Policy="Player">
    <p class="actions">
        <button class="btn btn-outline-primary" type="submit" @onclick="@RequestForOrganizerAsync">Request for organizer</button>
    </p>
    <p>@confirmationMessage</p>
</AuthorizeView>



@code {
    private string username;
    private string confirmationMessage;
    private User user;

    protected override async Task OnInitializedAsync()
    {
        username = ((CustomAuthenticationStateProvider) stateProvider).GetAuthenticationStateAsync().Result.User.FindFirst(claim => claim.Type.Equals(ClaimTypes.Name))?.Value;
        user = await userService.GetUserByUsernameAsync(username);
    }
    
    private async Task RequestForOrganizerAsync()
    {
        await userService.RequestPromotionToOrganizerAsync(username);
        confirmationMessage = "Request for organizer sent successfully.";
    }

    private async Task DeleteAccountAsync()
    {
        if (!await jsRuntime.InvokeAsync<bool>("confirm","Are you sure you want to delete your account?"))
            return;
        await userService.DeleteAccountAsync(username);
        await ((CustomAuthenticationStateProvider) stateProvider).Logout();
        navigationManager.NavigateTo("/");
    }

    private void Edit()
    {
        navigationManager.NavigateTo($"/EditAccount/{username}");
    }

}
