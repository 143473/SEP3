@page "/AllEvents"
@page "/AllEvents/{currentPage:int}"
@using Models
@using PresentationTier.Data.EventServices.Categories
@using PresentationTier.Data.EventServices.Events

@inject NavigationManager navigationManager
@inject IEventService restEvent
@inject ICategoryService categoryService

<AuthorizeView Policy="PlayerOrOrganizer">
    <Authorized>
        
        <h2>All Events</h2>

        <AuthorizeView Policy="Organizer" Context="additionalAuthentication">
            <p class="actions">
                <button @onclick="@CreateEvent" class="button simple-button" type="submit"><i class="oi oi-plus"></i> Create</button>
            </p>
        </AuthorizeView>

        <div class="grid-container-fourths">
            <span>
                Date:
                <Select class="selectpicker" @oninput="@(FilterByDateAsync)">
                    <option value="false">-- All --</option>
                    <option value="true">All Upcomming</option>
                </Select>
            </span>
            <span>
                Category:
                <Select class="selectpicker" @oninput="@(FilterByCategoryAsync)">
                    <option value="0">-- All --</option>
                    @foreach (var category in categories)
                    {
                        <option value=@category.Id>@category.Name</option>
                    }
                </Select>
            </span>
            <span>
                Available
                <Select class="selectpicker" @oninput="@(FilterByAvailabilityAsync)">
                    <option value="false">-- All --</option>
                    <option value="true">Available</option>
                </Select>
            </span>
            <span>
                Results per page
                <Select class="selectpicker" @oninput="@(ResultsPerPageAsync)">
                    <option value="3">3</option>
                    <option value="6">6</option>
                    <option value="9">9</option>
                    <option value="12">12</option>
                </Select>
            </span>
        </div>
            


        <div class="card-deck">
            @foreach (var item in eventList)
            {
                <div class="row row-cols-1 row-cols-md-3">
                    <div class="col mb-4">
                        <div class="card h-100" @onclick="@(() => NavigateToEvent(item.Id))" style="width: 22rem;">
                            <div class="card-body">
                                <h5 class="card-title">@item.Name</h5>
                                @if (item.EndTime.Subtract(item.StartTime).TotalMinutes < 0)
                                {
                                    <p class="card-text">Time: @item.StartTime.ToString("f")</p>
                                }
                                else
                                {
                                    <p class="card-text">Time: @item.StartTime.ToString("f") - @item.EndTime.ToString("t")</p>
                                }
                                @if (item.AddressApartmentNumber != null)
                                {
                                    <p class="card-text">@item.AddressStreetName @item.AddressStreetNumber, @item.AddressApartmentNumber</p>
                                }
                                else
                                {
                                    <p class="card-text">@item.AddressStreetName @item.AddressStreetNumber</p>
                                }
                            </div>
                        </div>
                    </div>
                </div>
                
            }
        </div>

        <ul class="pagination justify-content-center">
            @if (numberOfPages > 1)
            {
                for (var i = 1; i <= numberOfPages; i++)
                {
                    var page = i;
                    <li class="page-item">
                        <a class="page-link" href="AllEvents/@i" @onclick="() => SetCurrentPageAsync(page)">@i</a>
                    </li>
                }
            }
        </ul>
    </Authorized>
    <NotAuthorized>
        @{
            NavigateHome();
        }
        ;
    </NotAuthorized>
</AuthorizeView>


@code {
    [Parameter]
    public int CurrentPage { get; set; }

    private bool byAvailability;
    private bool byDate;
    private int numberOfPages;
    private int categoryId;
    private int resultsPerPage;
    private IList<Category> categories = new List<Category>();
    private EventList events = new();
    private Event[] eventList = {};
    private readonly FilterREST filterRest = new ();

    protected override async Task OnInitializedAsync()
    {
        resultsPerPage = 3;
        if (CurrentPage < 1) CurrentPage = 1;
        categories = await categoryService.GetCategoriesAsync();
        await FilterAsync();
    }

    private async Task FilterAsync()
    {
        filterRest.ByAvailability = byAvailability;
        filterRest.ByDate = byDate;
        filterRest.CategoryId = categoryId;
        filterRest.CurrentPage = CurrentPage;
        filterRest.ResultsPerPage = resultsPerPage;
        
        events = await restEvent.GetFilteredEventsAsync(filterRest);

        numberOfPages = events.Count;
        eventList = events.ListOfEvents;
        CurrentPage = 1;
    }

    private async Task FilterByDateAsync(ChangeEventArgs args)
    {
        if (args.Value != null && args.Value.Equals("true"))
        {
            byDate = true;
        }
        else byDate = false;
        await FilterAsync();
    }

    private async Task FilterByAvailabilityAsync(ChangeEventArgs args)
    {
        if (args.Value != null && args.Value.Equals("true"))
        {
            byAvailability = true;
        }
        else byAvailability = false;
        await FilterAsync();
    }

    private async Task FilterByCategoryAsync(ChangeEventArgs args)
    {
        if (args.Value != null) categoryId = int.Parse(args.Value.ToString() ?? string.Empty);
        await FilterAsync();
    }

    private async Task ResultsPerPageAsync(ChangeEventArgs args)
    {
        if (args.Value != null) resultsPerPage = int.Parse(args.Value.ToString() ?? string.Empty);
        await FilterAsync();
    }

    private async Task SetCurrentPageAsync(int page)
    {
        CurrentPage = page;
        await FilterAsync();
    }

    private void NavigateToEvent(int id)
    {
        navigationManager.NavigateTo($"EventInfo/{id}");
    }

    private void CreateEvent()
    {
        navigationManager.NavigateTo("CreateEvent");
    }

    private void NavigateHome()
    {
        navigationManager.NavigateTo("/");
    }
}