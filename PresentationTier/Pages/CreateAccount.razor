@page "/CreateAccount"
@using PresentationTier.Models
@using PresentationTier.Data.UserServices

@inject IUserService userService
@inject NavigationManager navigationManager
@inject AuthenticationStateProvider stateProvider
@inject IJSRuntime jsRuntime

<h2>Create Account</h2>
<EditForm Model="@user" OnValidSubmit="@CreateAccountAsync">
    <DataAnnotationsValidator/>
    <ValidationSummary/>
    
    <div class="grid-container-thirds">
        <div>
            <div class="form-group">
                *Username:<br/>
                <InputText class="form-field" @bind-Value="user.Username"/>
            </div>
            <div class="form-group">
                *Password:<br/>
                <InputText class="form-field" @bind-Value="user.Password" type="password"/>
            </div>
            <div class="form-group">
                *Confirm Password:<br/>
                <InputText class="form-field" @bind-Value="user.ConfirmPassword" type="password"/>
            </div>
        </div>
        <div>
            <div class="form-group">
                First Name:<br/>
                <InputText class="form-field" @bind-Value="user.FirstName"/>
            </div>
            <div class="form-group">
                Last Name:<br/>
                <InputText class="form-field" @bind-Value="user.LastName"/>
            </div>
        </div>
        <div>
            <div class="form-group">
                Phone number:<br/>
                <InputText class="form-field" @bind-Value="user.PhoneCountryCode"  style="width: 50px"/><InputText class="form-field" @bind-Value="user.PhoneNumber"/>
            </div>
            <div class="form-group">
                Email:<br/>
                <InputText class="form-field" @bind-Value="user.EmailAddress"/>
            </div>
        </div>
    </div>
    

    <p class="actions">
        <button class="button simple-button" type="submit">Create</button>
    </p>
    @if (!(errorMessage.Equals("") || errorMessage.Equals("success")))
    {
        <div class="alert alert-danger" role="alert">@errorMessage</div>
    }
</EditForm>

@code {
    private readonly User user = new();
    private string errorMessage;
    
    protected override void OnInitialized()
    {
        errorMessage = "";
    }

    private async Task CreateAccountAsync()
    {
        errorMessage = await userService.CreateAccountAsync(user);
        if (errorMessage.Equals("success"))
        {
            await jsRuntime.InvokeVoidAsync("alert", "Successfully created an account");
            navigationManager.NavigateTo("/");
        }
    }
}