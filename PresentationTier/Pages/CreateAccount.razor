@page "/CreateAccount"

@using global::Data
@using PresentationTier.Models

@inject IUserService userService
@inject NavigationManager navigationManager
@inject AuthenticationStateProvider stateProvider

<h3>Create Account</h3>
<EditForm Model="@user" OnValidSubmit="@CreateAccountAsync">
    <DataAnnotationsValidator/>
    <ValidationSummary/>
    <div class="form-group">
        Username:<br/>
        <InputText @bind-Value="user.Username"/>
    </div>
    <div class="form-group">
        Password:<br/>
        <InputText @bind-Value="user.Password" type="password"/>
    </div>
    <div class="form-group">
        Confirm Password:<br/>
        <InputText @bind-Value="user.ConfirmPassword" type="password"/>
    </div>
    <div class="form-group">
        First Name:<br/>
        <InputText @bind-Value="user.FirstName"/>
    </div>
    <div class="form-group">
        Last Name:<br/>
        <InputText @bind-Value="user.LastName"/>
    </div>
    <div class="form-group">
        Phone number:<br/>
        <InputText @bind-Value="user.PhoneNumber"  style="width: 50px"/><InputText @bind-Value="user.PhoneNumber"/>
    </div>
    <div class="form-group">
        Email:<br/>
        <InputText @bind-Value="user.EmailAddress"/>
    </div>

    <p class="actions">
        <button class="btn btn-outline-success" type="submit">Create</button>
    </p>
    @if (!(errorMessage.Equals("") || errorMessage.Equals("success")))
    {
        <div class="alert alert-danger" role="alert">@errorMessage</div>
    }
</EditForm>

@code {
    private readonly User user = new();
    private string errorMessage;
    
    protected override void OnInitialized()
    {
        errorMessage = "";
    }

    private async Task CreateAccountAsync()
    {
        errorMessage = await userService.CreateAccountAsync(user);
        if (errorMessage.Equals("success"))
        {
            navigationManager.NavigateTo("/");
        }
    }
}