@page "/PaymentOverview"
@using PresentationTier.Models
@using PresentationTier.Authentication
@using System.Security.Claims
@using PresentationTier.Data

@inject AuthenticationStateProvider stateProvider
@inject IPaymentService paymentService
@inject NavigationManager navigationManager


<h1>Payment Overview</h1>

<h2>Subscription</h2>
@if (monthlyFee!= null && monthlyFee.EndDate.CompareTo(DateTime.Today) > 0)
{
    <p>Active until: @monthlyFee.EndDate.ToLongDateString()</p>
    <button class="btn btn-outline-primary" type="submit" @onclick="@Subscribe">Subscribe Now!</button>
}
else
{
    <p>No active subscription</p>
    <button style="margin-bottom: 3em" class="btn btn-outline-success" type="submit" @onclick="@Subscribe">Subscribe Now!</button>

}

<h2>Payment History</h2>
@if (monthlyFeeList != null)
{
    <h3>Subscriptions</h3>
    <ul>
         @foreach (var item in monthlyFeeList)
         {
             <div id="payment_overview" style="margin: 1em 0">
                 <div style="margin-bottom: 3em" class="oi oi-dollar">
                 </div>
                 <div>
                     <li>@item.Amount dkk</li>
                     <li>From: @item.StartDate.ToLongDateString()</li>
                     <li>To: @item.EndDate.ToLongDateString()</li>
                 </div>
             </div>
         }
    </ul>
}
else 
{<p>No monthly fees</p>}

@if (oneTimeFees != null)
{
    <h3>Payments</h3>
    @foreach (var item in oneTimeFees)
    {
        <ul>
            <li>@item.Amount dkk</li>
        </ul>
    }
}
else 
{<p>No one time fees</p>}


@code {
    private MonthlyFee monthlyFee = new();
    private IList<MonthlyFee> monthlyFeeList = new List<MonthlyFee>();
    private IList<OneTimeFee> oneTimeFees = new List<OneTimeFee>();
    private string username;
    
    protected override async Task OnInitializedAsync()
    {
        username = ((CustomAuthenticationStateProvider) stateProvider).GetAuthenticationStateAsync().Result.User.FindFirst(claim => claim.Type.Equals(ClaimTypes.Name))?.Value;
        monthlyFeeList = await paymentService.GetSubscriptionListAsync(username);
        oneTimeFees = await paymentService.GetOneTimePaymentListAsync(username);
        monthlyFee = await paymentService.GetSubscriptionAsync(username);
    }

    private void Subscribe()
    {
        navigationManager.NavigateTo("Payment");
    }
    
}