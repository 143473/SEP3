@page "/EditGameList"

@using Presentation_Layer.Models
@using System.Security.Claims
@using Presentation_Layer.Authentication
@using Presentation_Layer.Data

@inject IGameService gameService
@inject IGameListService gameListService
@inject NavigationManager navigationManager
@inject AuthenticationStateProvider stateProvider

<h3>Edit Game List</h3>
<p class="actions">
    <button @onclick="@SuggestGame" class="btn btn-outline-secondary" type="submit">
            <i class="oi oi-plus"></i> Suggest a new game
    </button>
</p>

@if (goldenGameList == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else if (!goldenGameList.Any())
{
    <p>
        <em>No games exist. Please suggest some.</em>
    </p>
}
else
{
    <input type="text" @bind-value="searchName"  style="width: 250px"/>
    <button @onclick="@SearchGameAsync" class="btn btn-outline-secondary" type="submit">Search</button>
    <table class="table">
        <thead>
        <tr>
            <th>Name</th>
            <th>In my Game List</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var item in goldenGameList)
        {
            <tr>
                <td @onclick="@(() => MoreGameInfo(item.Id))"><a href="#">@item.Name</a></td>
                <td>
                    <input type="checkbox" checked=@(gamesOfUser.FirstOrDefault(game => game.Id == item.Id) != null) @onchange="@(arg => CompletedChangeAsync(arg, item.Id))"/>
                </td>
            </tr>
        }
        </tbody>
    </table>
    @if (goldenGameListPage != null && goldenGameListPage.Count == initialResultsNumber)
    {
        <button @onclick="@LoadMoreAsync" class="btn btn-outline-secondary" type="submit">
            <i class="oi oi-plus"></i> Load more
        </button>
    }
}

    
<p class="actions">
        <button @onclick="@GoBack" class="btn btn-outline-secondary" type="submit">
            Go back
        </button>
</p>

@code {
    private IList<Game> goldenGameListPage = new List<Game>();
    private List<Game> goldenGameList = new ();
    private FilterREST filterRest = new ();
    private IList<Game> gamesOfUser;
    private string username;
    private string searchName;
    private int initialResultsNumber;

    protected override async Task OnInitializedAsync()
    {
        filterRest.CurrentPage = 1;
        goldenGameListPage = await gameService.GetLimitedSearchGGLAsync(filterRest);
        initialResultsNumber = goldenGameListPage.Count;
        goldenGameList.AddRange(goldenGameListPage);
        username = ((CustomAuthenticationStateProvider) stateProvider).GetAuthenticationStateAsync().Result.User.FindFirst(claim => claim.Type.Equals(ClaimTypes.Name))?.Value;
        gamesOfUser = await gameListService.GetUserGamesAsync(username);
    }
    
    private async Task CompletedChangeAsync(ChangeEventArgs arg, int id)
    {
        var inList = arg.Value != null && (bool) arg.Value;
        await gameListService.UpdateUserGamesAsync(username, id, inList);
    }
    
    private void GoBack()
    {
        navigationManager.NavigateTo("GameList");
    }
    
    private void MoreGameInfo(int id)
    {
        navigationManager.NavigateTo($"GameInfo/{id}");
    }
    
    private void SuggestGame()
    {
        navigationManager.NavigateTo("CreateGame");
    }
    
    private async Task SearchGameAsync()
    {
        filterRest.Search = searchName;
        filterRest.CurrentPage = 1;
        goldenGameListPage = await gameService.GetLimitedSearchGGLAsync(filterRest);
        goldenGameList.Clear();
        goldenGameList.AddRange(goldenGameListPage);
    }

    private async Task LoadMoreAsync()
    {
        filterRest.CurrentPage += 1;
        filterRest.Search = searchName;
        goldenGameListPage = await gameService.GetLimitedSearchGGLAsync(filterRest);
        goldenGameList.AddRange(goldenGameListPage);
    }
}