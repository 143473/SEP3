@page "/EditGameList"

@using PresentationTier.Models
@using System.Security.Claims
@using PresentationTier.Authentication
@using PresentationTier.Data.GameServices.GameLists
@using PresentationTier.Data.GameServices.Games

@inject IGameService gameService
@inject IGameListService gameListService
@inject NavigationManager navigationManager
@inject AuthenticationStateProvider stateProvider

<AuthorizeView Policy="Organizer">
    <Authorized>
        <h2>Edit Game List</h2>
        <div class="grid-container-fifty-fifty remove-line-above">
            <div class="actions">
                <button @onclick="@SuggestGame" class="button simple-button" type="submit">
                    <i class="oi oi-plus"></i> Suggest a new game
                </button>
            </div>
            <div>
                <input class="form-field" type="text" @bind-value="searchName" style="width: 250px"/>
                <button @onclick="@SearchGameAsync" class="button simple-button" type="submit">Search</button>
            </div>
        </div>


        @if (goldenGameList == null)
        {
            <p>
                <em>Loading...</em>
            </p>
        }
        else if (!goldenGameList.Any())
        {
            <p>
                <em>No such games exist.</em>
            </p>
        }
        else
        {
            <table class="table">
                <tbody>
                @foreach (var item in goldenGameList)
                {
                    <tr>
                        <td>
                            <input type="checkbox" checked=@(gameIds.Contains(item.Id)) @onchange="@(arg => CompletedChangeAsync(arg, item.Id))"/>
                        </td>
                        <td>
                            <a href="#" @onclick="@(() => MoreGameInfo(item.Id))">@item.Name</a>
                        </td>
                    </tr>
                }
                </tbody>
            </table>
            @if (goldenGameListPage != null && goldenGameListPage.Count == initialResultsNumber)
            {
                <button @onclick="@LoadMoreAsync" class="button simple-button" type="submit">
                    <i class="oi oi-plus"></i> Load more
                </button>
            }
        }
    </Authorized>
    <NotAuthorized>
        @{
            NavigateHome();
        }
        ;
    </NotAuthorized>
</AuthorizeView>

@code {
    private IList<Game> goldenGameListPage = new List<Game>();
    private List<Game> goldenGameList = new();
    private FilterREST filterRest = new();
    private IList<int> gameIds;
    private string username;
    private string searchName;
    private int initialResultsNumber;

    protected override async Task OnInitializedAsync()
    {
        filterRest.CurrentPage = 1;
        goldenGameListPage = await gameService.GetLimitedSearchGGLAsync(filterRest);
        initialResultsNumber = goldenGameListPage.Count;
        goldenGameList.AddRange(goldenGameListPage);
        username = ((CustomAuthenticationStateProvider) stateProvider).GetAuthenticationStateAsync().Result.User.FindFirst(claim => claim.Type.Equals(ClaimTypes.Name))?.Value;
        gameIds = await gameListService.GetUserGamesIdsAsync(username);
    }

    private async Task CompletedChangeAsync(ChangeEventArgs arg, int id)
    {
        var inList = arg.Value != null && (bool) arg.Value;
        await gameListService.EditUserGamesAsync(username, id, inList);
    }

    private void MoreGameInfo(int id)
    {
        navigationManager.NavigateTo($"GameInfo/{id}");
    }

    private void SuggestGame()
    {
        navigationManager.NavigateTo("CreateGame");
    }

    private async Task SearchGameAsync()
    {
        filterRest.Search = searchName;
        filterRest.CurrentPage = 1;
        goldenGameListPage = await gameService.GetLimitedSearchGGLAsync(filterRest);
        gameIds = await gameListService.GetUserGamesIdsAsync(username);
        goldenGameList.Clear();
        goldenGameList.AddRange(goldenGameListPage);
    }

    private async Task LoadMoreAsync()
    {
        filterRest.CurrentPage += 1;
        filterRest.Search = searchName;
        goldenGameListPage = await gameService.GetLimitedSearchGGLAsync(filterRest);
        goldenGameList.AddRange(goldenGameListPage);
    }

    private void NavigateHome()
    {
        navigationManager.NavigateTo("/");
    }

}