@page "/EditEvent/{Id:int}"

@using Presentation_Layer.Data
@using Presentation_Layer.Models
@using Microsoft.AspNetCore.Components
@using Presentation_Layer.Authentication
@using System.Security.Claims

@attribute [Authorize(Policy = "Organizer")]

@inject IEventService eventService
@inject ICategoryService categoryService
@inject IJSRuntime jsRuntime
@inject NavigationManager navigationManager
@inject AuthenticationStateProvider stateProvider

<h3>Create Event</h3>
<EditForm Model="@eventToEdit" OnValidSubmit="@EditThisEventAsync">
    <DataAnnotationsValidator/>
    <ValidationSummary/>
    <div class="form-group">
        Name:<br/>
        <InputText @bind-Value="eventToEdit.Name"/>
    </div>
    <div class="form-group">
        Date: <br/>
        <InputDate @bind-Value="eventToEdit.Date"/>
    </div>
    <div class="form-group">
        Start Time: <br/>
        <input type="time" required @bind-value="@eventToEdit.Start"/>
    </div>
    <div class="form-group" aria-disabled="true">
        End Time:<br/>
        <input type="time" required @bind-value="@eventToEdit.End">
    </div>
    <div class="form-group">
        Address Street Name:<br/>
        <InputText @bind-Value="eventToEdit.AddressStreetName"/>
    </div>
    <div class="form-group">
        Address Street Number:<br/>
        <InputText @bind-Value="eventToEdit.AddressStreetNumber"/>
    </div>
    <div class="form-group">
        Address Apartment Number:<br/>
        <InputText @bind-Value="eventToEdit.AddressApartmentNumber"/>
    </div>
    <div class="form-group">
        Max number of participants:<br/>
        <InputNumber @bind-Value="eventToEdit.MaxNumberOfParticipants" style="width: 75px"  disabled/>
    </div>
    <div class="form-group">
        Event category:<br/>
        <InputSelect @bind-Value="eventToEdit.EventCategory" disabled>
            <option value="0">Select category</option>
            @foreach (var category in categories)
            {
                <option value=@category.Id>@category.Name</option>
            }
        </InputSelect>
    </div>

    <p class="actions">
        <button class="btn btn-outline-success" type="submit">Save</button>
    </p>
</EditForm>


@code {
    [Parameter]
    public int Id { get; set; }
    
    private Event eventToEdit = new();
    private IList<Category> categories = new List<Category>();

    protected override async Task OnInitializedAsync()
    {
        eventToEdit = await eventService.GetEventAsync(Id);
        eventToEdit.Date = eventToEdit.StartTime.Date;
        eventToEdit.Start = eventToEdit.StartTime;
        eventToEdit.End = eventToEdit.EndTime;
        categories = await categoryService.GetCategoriesAsync();
    }

    private async Task EditThisEventAsync()
    {
        var newEventOrganizer = ((CustomAuthenticationStateProvider) stateProvider).GetAuthenticationStateAsync().Result.User.FindFirst(claim => claim.Type.Equals(ClaimTypes.Name))?.Value;
        if (newEventOrganizer != null) eventToEdit.Organizer = newEventOrganizer;

        eventToEdit.StartTime = eventToEdit.Date.Add(eventToEdit.Start.TimeOfDay);
        if (eventToEdit.End != null) eventToEdit.EndTime = eventToEdit.Date.Add(eventToEdit.End.Value.TimeOfDay);
        await eventService.EditEventAsync(eventToEdit);
        await jsRuntime.InvokeVoidAsync("alert", "Successfully edited the event");
        navigationManager.NavigateTo($"EventInfo/{Id}");
    }
}