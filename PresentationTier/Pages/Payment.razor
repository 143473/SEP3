@page "/Payment"
@page "/Payment/{eventId:int}"

@using PresentationTier.Models
@using PresentationTier.Authentication
@using System.Security.Claims
@using PresentationTier.Data.FeeServices

@inject IFeeService feeService
@inject NavigationManager navigationManager
@inject AuthenticationStateProvider stateProvider


<h2>Payment</h2>

@if (!errorMessage.Equals("") && !errorMessage.Equals("Approved"))
{
    <div class="alert alert-danger" role="alert">@errorMessage</div>
}


<EditForm style="width: 50%" Model="@userCardInfo" OnValidSubmit="@SubscribeAsync">
    <DataAnnotationsValidator/>
    <ValidationSummary/>
    <div class="grid-container-payment">
        <div>
            <p><label>Card holder name</label></p>
            <p><label>Card number</label></p>
            <p><label>CVC</label></p>
            <p><label>Expiration Date</label></p>
        </div>
        <div>
            <div class="form-group">
                <InputText class="form-field" @bind-Value="userCardInfo.CardHolderName" size="50"/>
            </div>
            <div class="form-group">
                <InputText class="form-field" @bind-Value="userCardInfo.CardNumber"  size="50"/>
            </div>
            <div class="form-group">
                <InputText class="form-field" @bind-Value="userCardInfo.CVC" />
            </div>
            <div class="form-group">
                <input class="form-field" type="month" @bind-value="userCardInfo.ExpiryDate" size="50"/>
            </div>
        </div>
    </div>
    
    

    @if (EventId > 0)
    {
        <p class="actions">
            <button class="button simple-button" type="submit">Pay</button>
        </p>
    }
    else
    {
        <p class="actions">
            <button class="button simple-button" type="submit">Subscribe</button>
        </p>
    }
</EditForm>

@code {

    [Parameter]
    public int EventId { get; set; }

    private UserCardInfo userCardInfo = new();
    private string errorMessage = "";
    private string username;

    protected override void OnInitialized()
    {
        userCardInfo.ExpiryDate = DateTime.Today;
    }

    private async Task SubscribeAsync()
    {
        username = ((CustomAuthenticationStateProvider) stateProvider).GetAuthenticationStateAsync().Result.User.FindFirst(claim => claim.Type.Equals(ClaimTypes.Name))?.Value;
        userCardInfo.Username = username;
        userCardInfo.EventId = EventId;
        var message = "";
        if (!await feeService.CheckSubscriptionAsync(username))
        {
            userCardInfo.StartDateTime = DateTime.Today;
        }
        if (EventId > 0)
        {
            message = await feeService.CreateOneTimeFeeAsync(userCardInfo);
        }
        else
        {
           message = await feeService.SubscribeAsync(userCardInfo);
        }
        
        if (message.Equals("Approved"))
        {
            navigationManager.NavigateTo(EventId > 0 ? $"EventInfo/{EventId}" : "PaymentOverview");
        }
        else
        {
            errorMessage = message;
        }
    }
}