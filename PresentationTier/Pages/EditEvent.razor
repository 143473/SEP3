@page "/EditEvent/{Id:int}"
@using PresentationTier.Models
@using Microsoft.AspNetCore.Components
@using PresentationTier.Authentication
@using System.Security.Claims
@using PresentationTier.Data.EventServices.Categories
@using PresentationTier.Data.EventServices.Events


@inject IEventService eventService
@inject ICategoryService categoryService
@inject IJSRuntime jsRuntime
@inject NavigationManager navigationManager
@inject AuthenticationStateProvider stateProvider

<AuthorizeView Policy="Organizer">
    <Authorized>

        <h2>Edit Event</h2>
        <EditForm Model="@eventToEdit" OnValidSubmit="@EditThisEventAsync" Context="editForm">
            <DataAnnotationsValidator/>
            <ValidationSummary/>
            <div class="grid-container-thirds">
                <div>
                    <div class="form-group">
                        *Name:<br/>
                        <InputText class="form-field" @bind-Value="eventToEdit.Name"/>
                    </div>
                    <div class="form-group">
                        *Date: <br/>
                        <InputDate class="form-field" @bind-Value="eventToEdit.Date"/>
                    </div>
                    <div class="form-group">
                        *Start Time: <br/>
                        <input class="form-field" type="time" required @bind-value="@eventToEdit.Start"/>
                    </div>
                    <div class="form-group" aria-disabled="true">
                        *End Time:<br/>
                        <input class="form-field" type="time" required @bind-value="@eventToEdit.End">
                    </div>
                </div>
                <div>
                    <div class="form-group">
                        *Address Street Name:<br/>
                        <InputText class="form-field" @bind-Value="eventToEdit.AddressStreetName"/>
                    </div>
                    <div class="form-group">
                        *Address Street Number:<br/>
                        <InputText class="form-field" @bind-Value="eventToEdit.AddressStreetNumber"/>
                    </div>
                    <div class="form-group">
                        Address Apartment Number:<br/>
                        <InputText class="form-field" @bind-Value="eventToEdit.AddressApartmentNumber"/>
                    </div>
                </div>
                <div>
                    <div class="form-group">
                        *Max number of participants:<br/>
                        <InputNumber class="form-field" @bind-Value="eventToEdit.MaxNumberOfParticipants" style="width: 75px" disabled/>
                    </div>
                    <div class="form-group">
                        *Event category:<br/>
                        <InputSelect class="form-field" @bind-Value="eventToEdit.EventCategory" disabled>
                            <option value="0">Select category</option>
                            @foreach (var category in categories)
                            {
                                <option value=@category.Id>@category.Name</option>
                            }
                        </InputSelect>
                    </div>
                </div>
            </div>
            <p class="actions">
                <button class="button simple-button" type="submit">Save</button>
            </p>
        </EditForm>
    </Authorized>
    <NotAuthorized>
        @{
            NavigateHome();
        }
        ;
    </NotAuthorized>
</AuthorizeView>


@code {

    [Parameter]
    public int Id { get; set; }

    private Event eventToEdit = new();
    private IList<Category> categories = new List<Category>();

    protected override async Task OnInitializedAsync()
    {
        eventToEdit = await eventService.GetEventAsync(Id);
        eventToEdit.Date = eventToEdit.StartTime.Date;
        eventToEdit.Start = eventToEdit.StartTime;
        eventToEdit.End = eventToEdit.EndTime;
        categories = await categoryService.GetCategoriesAsync();
    }

    private async Task EditThisEventAsync()
    {
        var newEventOrganizer = ((CustomAuthenticationStateProvider) stateProvider).GetAuthenticationStateAsync().Result.User.FindFirst(claim => claim.Type.Equals(ClaimTypes.Name))?.Value;
        if (newEventOrganizer != null) eventToEdit.Organizer = newEventOrganizer;

        eventToEdit.StartTime = eventToEdit.Date.Add(eventToEdit.Start.TimeOfDay);
        eventToEdit.EndTime = eventToEdit.Date.Add(eventToEdit.End.TimeOfDay);
        await eventService.EditEventAsync(eventToEdit);
        await jsRuntime.InvokeVoidAsync("alert", "Successfully edited the event");
        navigationManager.NavigateTo($"EventInfo/{Id}");
    }

    private void NavigateHome()
    {
        navigationManager.NavigateTo("/");
    }

}