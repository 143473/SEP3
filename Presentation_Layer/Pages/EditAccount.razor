@page "/EditAccount/{Username}"

@using global::Data
@using Presentation_Layer.Models

@inject IUserService userService;
@inject AuthenticationStateProvider stateProvider
@inject IJSRuntime jsRuntime
@inject NavigationManager navigationManager

<h3>Edit Account</h3>
<EditForm Model="@user" OnValidSubmit="@EditAccountAsync">
    <DataAnnotationsValidator/>
    <ValidationSummary/>
    <div class="form-group">
        Username:<br/>
        <InputText @bind-Value="user.Username" disabled/>
    </div>
    <div class="form-group">
        Password:<br/>
        <InputText @bind-Value="user.Password" type="password"/>
    </div>
    <div class="form-group">
        Confirm Password:<br/>
        <InputText @bind-Value="user.ConfirmPassword" type="password"/>
    </div>
    <div class="form-group">
        First Name:<br/>
        <InputText @bind-Value="user.FirstName"/>
    </div>
    <div class="form-group">
        Last Name:<br/>
        <InputText @bind-Value="user.LastName"/>
    </div>
    <div class="form-group">
        Phone number:<br/>
        <InputText @bind-Value="user.PhoneCountryCode"  style="width: 50px"/><InputText @bind-Value="user.PhoneNumber"/>
    </div>
    <div class="form-group">
        Email:<br/>
        <InputText @bind-Value="user.EmailAddress"/>
    </div>

    <p class="actions">
        <button class="btn btn-outline-success" type="submit">Save</button>
    </p>

</EditForm>

@code {
    [Parameter]
    public string Username { get; set; }
    
    private User user = new();
    
    protected override async Task OnInitializedAsync()
    {
        user = await userService.GetUserByUsernameAsync(Username);
        user.ConfirmPassword = user.Password;
    }

    private async Task EditAccountAsync()
    {
        await userService.EditAccountAsync(user);
        navigationManager.NavigateTo("/ManageAccount");
    }
}