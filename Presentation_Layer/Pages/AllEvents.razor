@page "/AllEvents"
@page "/AllEvents/{currentPage:int}"
@using Presentation_Layer.Data
@using Presentation_Layer.Models

@inject NavigationManager NavigationManager
@inject IEventService RestEvent
@inject ICategoryService CategoryService;

<h2>All Events</h2>

@* @context.User.Identity.Name *@
<AuthorizeView Policy="Organizer">
    <p class="actions">
        <button @onclick="@CreateEventAsync" class="btn btn-outline-success" type="submit"><i class="oi oi-plus"></i> Create</button>
    </p>
</AuthorizeView>


@* <p> *@
@*     <!--Search: <input type="text"  style="width: 150px"/> --> *@
@*     OldDate: *@
@*     <Select class="selectpicker" @oninput="@(arg => DateFilter(arg))"> *@
@*         <option value=@filteringOptions[1]>-- All --</option> *@
@*         <option value=@filteringOptions[0]>All Upcomming</option> *@
@*     </Select> *@
@*     OldCategory: *@
@*     <Select class="selectpicker" @oninput="@(arg => DateFilter(arg))"> *@
@*         <option value=@categoryOptions[0]>-- All --</option> *@
@*         <option value=@categoryOptions[1]>Children</option> *@
@*         <option value=@categoryOptions[2]>Adults</option> *@
@*         <option value=@categoryOptions[3]>Family</option> *@
@*     </Select> *@
@*     OldAvailable *@
@*     <Select class="selectpicker" @oninput="@(arg => DateFilter(arg))"> *@
@*         <option value=@filteringOptions[3]>-- All --</option> *@
@*         <option value=@filteringOptions[2]>Available</option> *@
@*     </Select> *@
@* </p> *@
<p>
    Date:
    <Select class="selectpicker" @oninput="@(FilterByDate)">
        <option value="false">-- All --</option>
        <option value="true">All Upcomming</option>
    </Select>
    Category:
    <Select class="selectpicker" @oninput="@(FilterByCategory)">
        <option value="0">-- All --</option>
        @foreach (var category in categories)
        {
            <option value=@category.Id>@category.Name</option>
        }
    </Select>
    Available
    <Select class="selectpicker" @oninput="@(FilterByAvailability)">
        <option value="false">-- All --</option>
        <option value="true">Available</option>
    </Select>
    Results per page
    <Select class="selectpicker" @oninput="@(ResultsPerPage)">
        <option value="3">3</option>
        <option value="6">6</option>
        <option value="9">9</option>
        <option value="12">12</option>
    </Select>
</p>


<div class="card-deck">
    @foreach (var item in eventList)
    {
        <div class="row row-cols-1 row-cols-md-3">
            <div class="col mb-4">
                <div class="card h-100" style="width: 22rem;">
                    <div class="card-body">
                        <h5 class="card-title">@item.Name</h5>
                        @if (item.EndTime.Subtract(item.StartTime).TotalMinutes < 0)
                        {
                            <p class="card-text">Time: @item.StartTime.ToString("f")</p>
                        }
                        else
                        {
                            <p class="card-text">Time: @item.StartTime.ToString("f") - @item.EndTime.ToString("t")</p>
                        }
                        @if (item.AddressApartmentNumber != null)
                        {
                            <p class="card-text">@item.AddressStreetName @item.AddressStreetNumber, @item.AddressApartmentNumber</p>
                        }
                        else
                        {
                            <p class="card-text">@item.AddressStreetName @item.AddressStreetNumber</p>
                        }
                    </div>
                    <div class="card-footer text-center">
                        <button class="btn btn-outline-primary" @onclick="@(() => NavigateToEvent(item.Id))">
                            More
                        </button>
                    </div>
                </div>
            </div>
        </div>
        
    }
</div>

<div>
    @if (numberOfPages > 1)
    {
        for (var i = 1; i <= numberOfPages; i++)
        {
            var page = i;
            <span><a href="AllEvents/@i" @onclick="() => SetCurrentPage(page)"> -@i- </a>|</span>
        }
    }
</div>

<ul class="pagination justify-content-center">
    @if (numberOfPages > 1)
    {
        for (var i = 1; i <= numberOfPages; i++)
        {
            var page = i;
            <li class="page-item">
                <a class="page-link" href="AllEvents/@i" @onclick="() => SetCurrentPage(page)">@i</a>
            </li>
        }
    }
</ul>


@* <table class="table"> *@
@*         <thead> *@
@*         <tr> *@
@*             <th>Id</th> *@
@*             <th>Name</th> *@
@*             <th>Start Time</th> *@
@*             <th>End Time</th> *@
@*             <th>Number of Participants</th> *@
@*             <th>Max Number of Participants</th> *@
@*             <th>Event Category</th> *@
@*         </tr> *@
@*         </thead> *@
@*         <tbody> *@
@*         @foreach (var item in eventsToShow) *@
@*         { *@
@*             <tr> *@
@*                 <td>@item.Id</td> *@
@*                 <td>@item.Name</td> *@
@*                 <td>@item.StartTime</td> *@
@*                 <td>@item.EndTime</td> *@
@*                 <td>@item.NumberOfParticipants</td> *@
@*                 <td>@item.MaxNumberOfParticipants</td> *@
@*                 <td>@item.EventCategory</td> *@
@*             </tr> *@
@*         } *@
@*         </tbody> *@
@* </table> *@




@code {

    [Parameter]
    public int CurrentPage { get; set; }

    private bool byAvailability;
    private bool byDate;
    
    private int numberOfPages;
    private int categoryId;
    private int resultsPerPage;
    

    private IList<Category> categories = new List<Category>();
    private EventList events = new();
    private Event[] eventList = {};

    private FilterREST filterRest = new ();

    protected override async Task OnInitializedAsync()
    {
        resultsPerPage = 3;
        if (CurrentPage < 1) CurrentPage = 1;
        categories = await CategoryService.GetCategoriesAsync();

        await Filter();
    }

    private async Task Filter()
    {
        filterRest.byAvailability = byAvailability;
        filterRest.byDate = byDate;
        filterRest.categoryId = categoryId;
        filterRest.currentPage = CurrentPage;
        filterRest.resultsPerPage = resultsPerPage;
        
        events = await RestEvent.GetFilteredEventsAsync(filterRest);
        numberOfPages = events.Count;
        eventList = events.eventList;
        CurrentPage = 1;
    }

    private async Task FilterByDate(ChangeEventArgs args)
    {
        if (args.Value.ToString().Equals("true"))
        {
            byDate = true;
        }
        else byDate = false;
        await Filter();
    }

    private async Task FilterByAvailability(ChangeEventArgs args)
    {
        if (args.Value.ToString().Equals("true"))
        {
            byAvailability = true;
        }
        else byAvailability = false;
        await Filter();
    }

    private async Task FilterByCategory(ChangeEventArgs args)
    {
        categoryId = int.Parse(args.Value.ToString());
        await Filter();
    }

    private async Task ResultsPerPage(ChangeEventArgs args)
    {
        resultsPerPage = int.Parse(args.Value.ToString());
        await Filter();
    }

    private async Task SetCurrentPage(int page)
    {
        CurrentPage = page;
        await Filter();
    }


    // private async Task DateFilter(ChangeEventArgs args)
    // {
    //     try
    //     {
    //         for (int i = 0; i < filteringOptions.Count; i++)
    //         {
    //             if (args.Value.ToString().Equals(filteringOptions[i]) && i%2 == 0)
    //             {
    //                 filter += filteringOptions[i];
    //             }
    //             else if (args.Value.ToString().Equals(filteringOptions[i]) && i%2 ==1)
    //             {
    //                 filter = filter.Replace(filteringOptions[i-1], "");
    //             }
    //         }
    //         if (int.Parse(args.Value.ToString()) != 0)
    //         {
    //             filter += filteringOptions[4];
    //             categoryId = int.Parse(args.Value.ToString());
    //         }
    //         else filter = filter.Replace(filteringOptions[4], string.Empty);
    //     }
    //     catch (Exception)
    //     {
    //     }
    //     EventsToShow = await RestEvent.GetFilteredEventsAsync(filter, categoryId);
    // }
    //
    // private async Task CategoryFilter(ChangeEventArgs args)
    // {
    //     try
    //     {
    //         if (int.Parse(args.Value.ToString()) != 0)
    //         {
    //             filter += filteringOptions[4];
    //             categoryId = int.Parse(args.Value.ToString());
    //         }
    //         else filter = filter.Replace(filteringOptions[4], string.Empty);
    //     }
    //     catch(Exception ){}
    //     EventsToShow = await RestEvent.GetFilteredEventsAsync(filter, categoryId);
    // }

    private async Task NavigateToEvent(int id)
    {
        NavigationManager.NavigateTo($"EventInfo/{id}");
    }

    private async Task CreateEventAsync()
    {
        NavigationManager.NavigateTo("CreateEvent");
    }
    
    /*
    private async Task Next()
    {
        var next = currentPage + 1;
        NavigationManager.NavigateTo($"AllEvents/{next}");
        await OnInitializedAsync();
    }
    
    private async Task Previous()
    {
        var previous = currentPage - 1;
        NavigationManager.NavigateTo($"AllEvents/{previous}");
        await OnInitializedAsync();
    }*/
    
    
}