@page "/AllEvents"
@using Presentation_Layer.Models
@using Presentation_Layer.Data

@inject NavigationManager NavigationManager
@inject IEventService RestEvent

<h2>AllEvents</h2>
<p>
    Search: <input type="text" @oninput="@(arg => FilterByName(arg))" style="width: 150px"/> 
    Date:
    <select class="selectpicker" style="width: 125px" >
        <option>-- All --</option>
        <option>All Upcomming</option>
    </select>
    Category:
        <select class="selectpicker" style="width: 125px" @bind="@Event.CategoryId" @oninput="@(arg => FilterByCategory(arg))">
            <option>-- All --</option>
            <option value="@Event.CategoryId = 1">Children</option>
            <option value="@Event.CategoryId = 2">Adults</option>
            <option value="@Event.CategoryId = 3">Family</option>
        </select>
</p>

<div class="container">
    @foreach (var item in EventsToShow)
    {
        <div class="box" @onclick="@(() => Edit(item.Id))">
            <div class="content">
                <h3>@item.Name</h3>
                <p>@item.StartTime</p>
                <p>@item.EndTime</p>
            </div>
        </div>
    }
</div>

@code {
    private Event Event;
    private IList<Event> Events;
    private IList<Event> EventsToShow = new List<Event>();
    private string? Search;
    private int? categoryId;
    
    protected override async Task OnInitializedAsync()
    {
        Events = await RestEvent.GetEventsAsync();
        EventsToShow = Events;
    }
    
    private void FilterByName(ChangeEventArgs changeEventArgs)
    {
        Search = null;
        try
        {
            Search = changeEventArgs.Value.ToString();
        }
        catch (Exception)
        {
    // ignored
        }
        ExecuteFilter();
    }

    private void FilterByCategory(ChangeEventArgs changeEventArgs)
    {
        categoryId = null;
        try
        {
            categoryId = int.Parse(changeEventArgs.Value.ToString());
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }
    // ignored
    }

    private void ExecuteFilter()
    {
        EventsToShow = Events.Where(a => (Search != null && a.Name.Contains(Search) || Search == null)
            && (categoryId != null && a.CategoryId == categoryId || categoryId == null)).ToList();
    }
    
    private void Edit(int id)
    {
        NavigationManager.NavigateTo($"EventInfo/{id}");
    }
}