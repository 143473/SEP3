@page "/AllEvents"
@page "/AllEvents/{currentPage:int}"


@using Presentation_Layer.Models
@using Presentation_Layer.Data
@using System.Reflection
@using Microsoft.VisualBasic

@inject NavigationManager NavigationManager
@inject IEventService RestEvent
@inject ICategoryService CategoryService;

<h2>AllEvents</h2>

@* @context.User.Identity.Name *@
<p class="actions">
    <button @onclick="@(() => CreateEventAsync())" class="btn btn-outline-dark" type="submit"><i class="oi oi-plus"></i> Create</button>
</p>


@* <p> *@
@*     <!--Search: <input type="text"  style="width: 150px"/> --> *@
@*     OldDate: *@
@*     <Select class="selectpicker" @oninput="@(arg => DateFilter(arg))"> *@
@*         <option value=@filteringOptions[1]>-- All --</option> *@
@*         <option value=@filteringOptions[0]>All Upcomming</option> *@
@*     </Select> *@
@*     OldCategory: *@
@*     <Select class="selectpicker" @oninput="@(arg => DateFilter(arg))"> *@
@*         <option value=@categoryOptions[0]>-- All --</option> *@
@*         <option value=@categoryOptions[1]>Children</option> *@
@*         <option value=@categoryOptions[2]>Adults</option> *@
@*         <option value=@categoryOptions[3]>Family</option> *@
@*     </Select> *@
@*     OldAvailable *@
@*     <Select class="selectpicker" @oninput="@(arg => DateFilter(arg))"> *@
@*         <option value=@filteringOptions[3]>-- All --</option> *@
@*         <option value=@filteringOptions[2]>Available</option> *@
@*     </Select> *@
@* </p> *@
<p>
    Date:
    <Select class="selectpicker" @oninput="@(FilterByDate)">
        <option value="false">-- All --</option>
        <option value="true">All Upcomming</option>
    </Select>
    Category:
    <Select class="selectpicker" @oninput="@(FilterByCategory)" >
        <option value="0">-- All --</option>
        @foreach (Category category in categories)
        {
            <option value=@category.Id>@category.Name</option>
        }
    </Select>
    Available
    <Select class="selectpicker" @oninput="@(FilterByAvailability)">
        <option value="false">-- All --</option>
        <option value="true">Available</option>
    </Select>

</p>


<div class="container">
    @foreach (var item in eventList)
    {
        <div class="card">
            <div class="card-body">
                <h5 class="card-title">@item.Name</h5>
                <p class="card-text">@item.StartTime</p>
                @if (item.AddressApartmentNumber != null)
                {
                    <p>@item.AddressStreetName @item.AddressStreetNumber, @item.AddressApartmentNumber</p>
                }
                else
                {
                    <p>@item.AddressStreetName @item.AddressStreetNumber</p>
                }
            </div>
            <div class="card-footer text-center">
                <button class="btn btn-primary col-sm-6" @onclick="@(() => NavigateToEvent(item.Id))">
                    More
                </button>
            </div>
        </div>
    }
</div>

<div>
    @if (numberOfPages > 1)
    {
       for (int i = 1; i <= numberOfPages; i++)
       {
          <span><a href="AllEvents/@i" @onclick="Filter" >  -@i- </a>|</span>
           //<button @onclick="Filter">-@i-</button>
       } 
    }
</div>




@* <table class="table"> *@
@*         <thead> *@
@*         <tr> *@
@*             <th>Id</th> *@
@*             <th>Name</th> *@
@*             <th>Start Time</th> *@
@*             <th>End Time</th> *@
@*             <th>Number of Participants</th> *@
@*             <th>Max Number of Participants</th> *@
@*             <th>Event Category</th> *@
@*         </tr> *@
@*         </thead> *@
@*         <tbody> *@
@*         @foreach (var item in eventsToShow) *@
@*         { *@
@*             <tr> *@
@*                 <td>@item.Id</td> *@
@*                 <td>@item.Name</td> *@
@*                 <td>@item.StartTime</td> *@
@*                 <td>@item.EndTime</td> *@
@*                 <td>@item.NumberOfParticipants</td> *@
@*                 <td>@item.MaxNumberOfParticipants</td> *@
@*                 <td>@item.EventCategory</td> *@
@*             </tr> *@
@*         } *@
@*         </tbody> *@
@* </table> *@




@code {

    [Parameter]
    public int currentPage { get; set; }
    
    private bool byAvailability = false;
    private bool byDate = false;
    private int numberOfPages;
    private int categoryId = 0;
    private IList<Category> categories = new List<Category>();
    private EventList events = new EventList();
    private Event[] eventList = new Event[]{};
    
    
    
    private string Search;
    private string filter = "all";
    private IList<int> categoryOptions = new List<int>() {0, 1, 2, 3};
    private IList<string> filteringOptions = new List<string>() {"byDate", "noDate", "byAvailability", "noAvailability", "byCategory", "noCategory"};


    protected override async Task OnInitializedAsync()
    {
       if(currentPage<1) currentPage = 1;
        categories = await CategoryService.GetCategoriesAsync();
        await Filter();


    //numberOfPages = RestEvent.GetNumberOfPages(EventsToShow);
    //EventsToShow = RestEvent.GetEventsPagination(EventsToShow, 1);
    }

    private async Task Filter()
    {
        events = await RestEvent.GetFilteredEventsAsync(byDate, byAvailability, currentPage, categoryId);
        numberOfPages = events.NumberOfPages;
        eventList = events.eventList;
    }

    private async Task FilterByDate(ChangeEventArgs args)
    {
        if (args.Value.ToString().Equals("true"))
        {
            byDate = true;
        }
        else byDate = false;
        await Filter();
       
    }

    private async Task FilterByAvailability(ChangeEventArgs args)
    {
        if (args.Value.ToString().Equals("true"))
        {
            byAvailability = true;
        }
        else byAvailability = false;
        await Filter();
    }

    private async Task FilterByCategory(ChangeEventArgs args)
    {
        categoryId = int.Parse(args.Value.ToString());
        await Filter();
    }


    // private async Task DateFilter(ChangeEventArgs args)
    // {
    //     try
    //     {
    //         for (int i = 0; i < filteringOptions.Count; i++)
    //         {
    //             if (args.Value.ToString().Equals(filteringOptions[i]) && i%2 == 0)
    //             {
    //                 filter += filteringOptions[i];
    //             }
    //             else if (args.Value.ToString().Equals(filteringOptions[i]) && i%2 ==1)
    //             {
    //                 filter = filter.Replace(filteringOptions[i-1], "");
    //             }
    //         }
    //         if (int.Parse(args.Value.ToString()) != 0)
    //         {
    //             filter += filteringOptions[4];
    //             categoryId = int.Parse(args.Value.ToString());
    //         }
    //         else filter = filter.Replace(filteringOptions[4], string.Empty);
    //     }
    //     catch (Exception)
    //     {
    //     }
    //     EventsToShow = await RestEvent.GetFilteredEventsAsync(filter, categoryId);
    // }
    //
    // private async Task CategoryFilter(ChangeEventArgs args)
    // {
    //     try
    //     {
    //         if (int.Parse(args.Value.ToString()) != 0)
    //         {
    //             filter += filteringOptions[4];
    //             categoryId = int.Parse(args.Value.ToString());
    //         }
    //         else filter = filter.Replace(filteringOptions[4], string.Empty);
    //     }
    //     catch(Exception ){}
    //     EventsToShow = await RestEvent.GetFilteredEventsAsync(filter, categoryId);
    // }

    private async Task NavigateToEvent(int id)
    {
        NavigationManager.NavigateTo($"EventInfo/{id}");
    }

    private async Task CreateEventAsync()
    {
        NavigationManager.NavigateTo($"CreateEvent");
    }

}