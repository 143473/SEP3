@page "/AllEvents"
@using Presentation_Layer.Models
@using Presentation_Layer.Data
@using System.Reflection
@using Microsoft.VisualBasic

@inject NavigationManager NavigationManager
@inject IEventService RestEvent

<h2>AllEvents</h2>

@* @context.User.Identity.Name *@
<p class="actions">
    <button @onclick="@(() => CreateEventAsync())" class="oi oi-plus" type="submit" >Create</button>
</p>


<p>
    <!--Search: <input type="text"  style="width: 150px"/> -->
    Date:
    <Select class="selectpicker" @oninput="@(arg => DateFilter(arg))">
        <option value=@filteringOptions[1]>-- All --</option>
        <option value=@filteringOptions[0]>All Upcomming</option>
    </Select>
    Category:
    <Select class="selectpicker" @oninput="@(arg => DateFilter(arg))">
        <option value=@categoryOptions[0]>-- All --</option>
        <option value=@categoryOptions[1]>Children</option>
        <option value=@categoryOptions[2]>Adults</option>
        <option value=@categoryOptions[3]>Family</option>
    </Select>
    Available
    <Select class="selectpicker" @oninput="@(arg => DateFilter(arg))">
        <option value=@filteringOptions[3]>-- All --</option>
        <option value=@filteringOptions[2]>Available</option>
    </Select>
</p>


<div class="container">
    @foreach (var item in EventsToShow)
    {
        <div @onclick="@(() => NavigateToEvent(@item.Id))" class="box">
            <div class="content">
                <h3>@item.Name</h3>
                <p>@item.StartTime</p>
                <p>@item.EndTime</p>
            </div>
        </div>
    }
</div>

<div>
    @if (numberOfPages > 1)
    {
       for (int i = 0; i < numberOfPages; i++)
       {
           <a> -@(i+1)- </a>
       } 
    }
</div>



<!--
<table class="table">
        <thead>
        <tr>
            <th>Id</th>
            <th>Name</th>
            <th>Start Time</th>
            <th>End Time</th>
            <th>Number of Participants</th>
            <th>Max Number of Participants</th>
            <th>Event Category</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var item in EventsToShow)
        {
            <tr>
                <td>@item.Id</td>
                <td>@item.Name</td>
                <td>@item.StartTime</td>
                <td>@item.EndTime</td>
                <td>@item.NumberOfParticipants</td>
                <td>@item.MaxNumberOfParticipants</td>
                <td>@item.EventCategory</td>
            </tr>
        }
        </tbody>
</table>
-->



@code {
    private IList<Event> EventsToShow = new List<Event>();
    private string Search;
    private int categoryId;
    private string filter ="all";
    private IList<int> categoryOptions = new List<int>() {0, 1, 2, 3};
    private IList<string> filteringOptions = new List<string>() {"byDate", "noDate", "byAvailability", "noAvailability", "byCategory", "noCategory"};
    private int numberOfPages;

    protected override async Task OnInitializedAsync()
    {
        EventsToShow = await RestEvent.GetFilteredEventsAsync(filter, categoryId);
        //numberOfPages = RestEvent.GetNumberOfPages(EventsToShow);
       //EventsToShow = RestEvent.GetEventsPagination(EventsToShow, 1);
    }
    
    private async Task DateFilter(ChangeEventArgs args)
    {
        try
        {
            for (int i = 0; i < filteringOptions.Count; i++)
            {
                if (args.Value.ToString().Equals(filteringOptions[i]) && i%2 == 0)
                {
                    filter += filteringOptions[i];
                }
                else if (args.Value.ToString().Equals(filteringOptions[i]) && i%2 ==1)
                {
                    filter = filter.Replace(filteringOptions[i-1], "");
                }
            }
            if (int.Parse(args.Value.ToString()) != 0)
            {
                filter += filteringOptions[4];
                categoryId = int.Parse(args.Value.ToString());
            }
            else filter = filter.Replace(filteringOptions[4], string.Empty);
        }
        catch (Exception)
        {
        }
        EventsToShow = await RestEvent.GetFilteredEventsAsync(filter, categoryId);
    }

    private async Task CategoryFilter(ChangeEventArgs args)
    {
        try
        {
            if (int.Parse(args.Value.ToString()) != 0)
            {
                filter += filteringOptions[4];
                categoryId = int.Parse(args.Value.ToString());
            }
            else filter = filter.Replace(filteringOptions[4], string.Empty);
        }
        catch(Exception ){}
        EventsToShow = await RestEvent.GetFilteredEventsAsync(filter, categoryId);
    }

    private async Task NavigateToEvent(int id)
    {
        NavigationManager.NavigateTo($"EventInfo/{id}");
    }
    
    private async Task CreateEventAsync()
    {
        NavigationManager.NavigateTo($"CreateEvent");
    }
    
}