@page "/EditGameList"
@using Presentation_Layer.Models
@using System.Collections
@using System.Security.Claims
@using Presentation_Layer.Authentication
@using Presentation_Layer.Data

@inject IGameService GameService
@inject IGameListService GameListService
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider stateProvider;


<h3>Edit Game List</h3>

@if (ggl == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else if (!ggl.Any())
{
    <p>
        <em>No ToDo items exist. Please add some.</em>
    </p>
}
else
{

    <table class="table">
        <thead>
        <tr>
            <th>Name</th>
            <th>In my Game List</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var item in ggl)
        {
            <tr>
                <td href="@item.Tutorial">@item.Name</td>
                <td>
                    <input type="checkbox" checked=@CheckIfInTheList(item.Id) @onchange="@((arg) => CompletedChange(arg, item))"/>
                </td>
            </tr>
        }
        </tbody>
    </table>
}

    
<p class="actions">
        <button @onclick="@SuggestGameAsync" class="btn btn-outline-secondary" type="submit">
                <i class="oi oi-plus"></i> Create
        </button>
</p>

@code {
        private IList<Game> ggl;
        private IList<int> userGamesIds;

    protected override async Task OnInitializedAsync()
        {
            ggl = await GameService.GetGGLAsync();
            var username = ((CustomAuthenticationStateProvider) stateProvider).GetAuthenticationStateAsync().Result.User.FindFirst(claim => claim.Type.Equals(ClaimTypes.Name))?.Value;
            userGamesIds = await GameListService.GetUserGamesIdsAsync(username);
        }
        
        private async Task SuggestGameAsync()
        {
                NavigationManager.NavigateTo("CreateGame");
        }
    
    private void CompletedChange(ChangeEventArgs evt, Game game)
    {
        //save changes
    }

    private bool CheckIfInTheList(int id)
    {
        return userGamesIds.Contains(id);
    //return userGames.Any(t => t.Id == id);
    }
    
}