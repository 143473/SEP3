@page "/CreateAccount"
@using global::Data
@using Presentation_Layer.Authentication
@using Presentation_Layer.Models

@inject IUserService UserService
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider

<h3>Create Account</h3>
<EditForm Model="@user" OnValidSubmit="@CreateAccountAsync">
    <DataAnnotationsValidator/>
    <div class="form-group">
        Name:<br/>
        <InputText @bind-Value="user.Username"/>
        <ValidationMessage For="@(() => user.Username)"/>
    </div>
    <div class="form-group">
        Password:<br/>
        <InputText @bind-Value="user.Password" type="password"/>
        <ValidationMessage For="@(() => user.Password)"/>
    </div>
    <div class="form-group">
        Confirm Password:<br/>
        <InputText @bind-Value="user.ConfirmPassword" type="password"/>
        <ValidationMessage For="@(() => user.ConfirmPassword)"/>
    </div>

    <p class="actions">
        <button class="btn btn-outline-success" type="submit">Create</button>
    </p>
    @if (!(errorMessage.Equals("") || errorMessage.Equals("success")))
    {
        <div class="alert alert-danger" role="alert">@errorMessage</div>
    }

</EditForm>

@code {
    private readonly User user = new();
    private string errorMessage;
    
    protected override async Task OnInitializedAsync()
    {
        errorMessage = "";
    }

    private async Task CreateAccountAsync()
    {
        errorMessage = await UserService.CreateAccountAsync(user);
        if (errorMessage.Equals("success"))
        {
            NavigationManager.NavigateTo("/");
        }
    }
}