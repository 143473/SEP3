@page "/EditEvent/{Id:int}"

@using Presentation_Layer.Data
@using Presentation_Layer.Models
@using Microsoft.AspNetCore.Components
@using Presentation_Layer.Authentication
@using System.Security.Claims

@attribute [Authorize(Policy = "Organizer")]

@inject IEventService EventService
@inject ICategoryService CategoryService;
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider Auth

<h3>Create Event</h3>
<EditForm Model="@_event" OnValidSubmit="@EditEventAsync">
    <DataAnnotationsValidator/>
    <ValidationSummary/>
    <div class="form-group">
        Name:<br/>
        <InputText @bind-Value="_event.Name"/>
    </div>
    <div class="form-group">
        Date: <br/>
        <InputDate @bind-Value="_event.Date"/>
    </div>
    <div class="form-group">
        Start Time: <br/>
        <input type="time" required @bind-value="@_event.Start"/>
    </div>
    <div class="form-group" aria-disabled="true">
        End Time:<br/>
        <input type="time" required @bind-value="@_event.End">
    </div>
    <div class="form-group">
        Address Street Name:<br/>
        <InputText @bind-Value="_event.AddressStreetName"/>
    </div>
    <div class="form-group">
        Address Street Number:<br/>
        <InputText @bind-Value="_event.AddressStreetNumber"/>
    </div>
    <div class="form-group">
        Address Apartment Number:<br/>
        <InputText @bind-Value="_event.AddressApartmentNumber"/>
    </div>
    <div class="form-group">
        Max number of participants:<br/>
        <InputNumber @bind-Value="_event.MaxNumberOfParticipants" style="width: 75px"  disabled/>
    </div>
    <div class="form-group">
        Event category:<br/>
        <InputSelect @bind-Value="_event.EventCategory" disabled>
            <option value="0">Select category</option>
            @foreach (var category in categories)
            {
                <option value=@category.Id>@category.Name</option>
            }
        </InputSelect>
    </div>

    <p class="actions">
        <button class="btn btn-outline-success" type="submit">Save</button>
    </p>

</EditForm>


@code {
    [Parameter]
    public int Id { get; set; }
    
    private Event _event = new();
    private IList<Category> categories = new List<Category>();

    protected override async Task OnInitializedAsync()
    {
        _event = await EventService.GetEventAsync(Id);
        _event.Date = _event.StartTime.Date;
        _event.Start = _event.StartTime;
        _event.End = _event.EndTime;
        categories = await CategoryService.GetCategoriesAsync();
    }

    private async Task EditEventAsync()
    {
        var newEventOrganizer = ((CustomAuthenticationStateProvider) Auth).GetAuthenticationStateAsync().Result.User.FindFirst(claim => claim.Type.Equals(ClaimTypes.Name))?.Value;
        if (newEventOrganizer != null) _event.Organizer = newEventOrganizer;

        _event.StartTime = _event.Date.Add(_event.Start.TimeOfDay);
        _event.EndTime = _event.Date.Add(_event.End.Value.TimeOfDay);
        await EventService.EditEvent(_event);
        await JSRuntime.InvokeVoidAsync("alert", "Successfully edited the event");
        NavigationManager.NavigateTo($"EventInfo/{Id}");
    }
}