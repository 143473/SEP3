@page "/EditEventGames/{eventId:int}"
@using Presentation_Layer.Models
@using Presentation_Layer.Data
@using Presentation_Layer.Authentication
@using System.Security.Claims

@inject IGameListService GameListService
@inject IEventGameListService EventGameListService
@inject AuthenticationStateProvider StateProvider
@inject NavigationManager NavigationManager

<h3>Edit Event Games</h3>

@if (gameList == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else if (!gameList.Any())
{
    <p>
        <em>No ToDo items exist. Please add some.</em>
    </p>
}
else
{

    <table class="table">
        <thead>
        <tr>
            <th>Name</th>
            <th>In my Game List</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var item in gameList)
        {
            <tr>
                <td @onclick="@(() => MoreGameInfo(item.Id))" href="#">@item.Name</td>
                <td>
                    <!--item.Id.Equals(gamesOfUser.FirstOrDefault(game => game.Id.Equals(item.Id)).Id)-->
                    <!-- (Condition ? yes : no) -->
                    <!--(gamesOfUser.FirstOrDefault(game => game.Id == item.Id) != null ? "yes" : "NO")-->
                    <input type="checkbox" checked=@(gamesInEvent.FirstOrDefault(game => game.Id == item.Id) != null) @onchange="@((arg) => CompletedChange(arg, item.Id))"/>
                    @* <!--<input type="checkbox" checked=@(idsOfGamesOfUser.Contains(item.Id)) @onchange="@((arg) => CompletedChange(arg, item.Id))"/>--> *@
                </td>
            </tr>
        }
        </tbody>
    </table>
}

    
<p class="actions">
        <button @onclick="@GoBack" class="btn btn-outline-secondary" type="submit">
            Go back
        </button>
</p>

@code {
    [Parameter]
    public int EventId { get; set; }
    
    private IList<Game> gameList;
    private IList<Game> gamesInEvent;
    private string username;

    protected override async Task OnInitializedAsync()
    {
        username = ((CustomAuthenticationStateProvider) StateProvider).GetAuthenticationStateAsync().Result.User.FindFirst(claim => claim.Type.Equals(ClaimTypes.Name))?.Value;
        gameList = await GameListService.GetUserGamesAsync(username);
        gamesInEvent = await EventGameListService.GetAllEventGameListAsync(EventId);
    }

    private async Task CompletedChange(ChangeEventArgs arg, int gameId)
    {
        //change the value
        bool inList = (bool) arg.Value;
        await EventGameListService.UpdateEventGamesAsync(username, gameId, EventId, inList);
    }
    
    private async Task MoreGameInfo(int gameId)
    {
        NavigationManager.NavigateTo($"GameInfo/{gameId}");
    }
    
    private void GoBack()
    {
        NavigationManager.NavigateTo($"EventInfo/{EventId}");
    }
}