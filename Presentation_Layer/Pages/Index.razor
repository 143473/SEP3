@page "/"

@using Presentation_Layer.Data
@using Presentation_Layer.Models

@inject NavigationManager NavigationManager
@inject IGameService GameService

<h1>BOOK & PLAY</h1>

<h2 style="color:red;">@title</h2>

Welcome to your new bording games app.
<br/>

    <h3 style="color:green">Add Game</h3>


<EditForm Model="@game" OnValidSubmit="@AddGameAsync">
        <DataAnnotationsValidator/>
        <ValidationSummary/>
        <div class="form-group">
            Game part1:
            <InputText type="text" @bind-Value="game.Name"/>
            part 2:
            <InputText type="text" @bind-Value="game.ShortDescription"/>
            <button class="btn btn-outline-dark" type="submit">Create</button>
        </div>
    </EditForm>


@if (gameToEdit != null)
{
    
    <h3 style="color:green">Edit Game</h3>
    <EditForm Model="@gameToEdit" OnValidSubmit="@Save">
        <DataAnnotationsValidator/>
        <ValidationSummary/>
        <div class="form-group">
            Game part1:
            <InputText @bind-Value="gameToEdit.Name"/>
            part 2:
            <InputText @bind-Value="gameToEdit.ShortDescription"/>
            <button class="btn btn-outline-dark" type="submit">Edit</button>
        </div>
    </EditForm>
}
else
{
    <h3>Choose a Game to edit</h3>
}

<br/>
<h3>Game List</h3>
@if (gameList == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else if (!gameList.Any())
{
    <p>
        <em>No Games exist. Please add some.</em>
    </p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>Click to replace title</th>
                <th>id</th>
                <th>name</th>
                <th>complexity</th>
                <th>timeEstimation</th>
                <th>minNumberOfPlayers</th>
                <th>maxNumberOfPlayers</th>
                <th>shorthescription</th>
                <th>neededEquipment</th>
                <th>minAge</th>
                <th>maxAge</th>
                <th>tutorial</th>
            <th>Remove</th>
            <th>Edit</th>

        </tr>
        </thead>
        <tbody>
        @foreach (var item in gameList)
        {
            <tr>
                <td>
                    <button @onclick="@(() => ChangeTitle(item.Id))">
                        <i class="oi oi-arrow-top" style="color:red"></i>
                    </button>
                </td>
                <td>@item.Id</td>
                <td>@item.Name</td>
                <td>@item.Complexity</td>
                <td>@item.TimeEstimation</td>
                <td>@item.MinNumberOfPlayers</td>
                <td>@item.MaxNumberOfPlayers</td>
                <td>@item.ShortDescription</td>
                <td>@item.NeededEquipment</td>
                <td>@item.MinAge</td>
                <td>@item.MaxAge</td>
                <td>@item.Tutorial</td>
                <td>
                    <button @onclick="@(() => RemoveGameAsync(item.Id))">
                        <i class="oi oi-trash" style="color:red"></i>
                    </button>
                </td>
                <td>
                    <button @onclick="@(() => gameToEdit = gameList.FirstOrDefault(t => t.Id == item.Id))">
                        <i class="oi oi-pencil" style="color:#1b6ec2"></i>
                    </button>
                </td>
            </tr>
        }
        </tbody>
    </table>
}

<Login>Login</Login>

@code
{
    private string title = "Hello World";
    private Game game = new Game();
    private Game gameToEdit;
    private IList<Game> gameList;

    public async Task AddGameAsync()
    {
        await GameService.SuggestGameAsync(game);
        await OnInitializedAsync();
    }

    public async Task RemoveGameAsync(int id)
    {
        Game gameToRemove = gameList.First(t => t.Id == id);
        await GameService.RemoveGameAsync(gameToRemove);
        await OnInitializedAsync();
    }

    public async Task ChangeTitle(int id)
    {
        Game gameAsync = await GameService.GetGameAsync(id);
        title = gameAsync.Name;

    }
    
    public async Task Save()
    {
        await GameService.UpdateGameApprovalAsync(gameToEdit);
        gameToEdit = null;
    }
}
