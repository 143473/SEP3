@page "/EventInfo/{Id:int}"
@using Presentation_Layer.Data
@using Presentation_Layer.Models
@using Presentation_Layer.Authentication
@using System.Security.Claims

@inject IParticipantService participantService;
@inject IOrganizerService organizerService;
@inject IEventService eventService;
@inject ICategoryService categoryService;
@inject IEventGameListService eventGameListService;
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider Auth

@if (categories.Count == 0)
{
    <div class="spinner"></div>
}
else
{
    <h3>@selectedEvent.Name</h3>

    if (selectedEvent.EndTime.Subtract(selectedEvent.StartTime).TotalMinutes < 0)
    {
        <p>Time: @selectedEvent.StartTime.ToString("f")</p>
    }
    else
    {
        <p>Time: @selectedEvent.StartTime.ToString("f") - @selectedEvent.EndTime.ToString("t")</p>
    }
    
    if (selectedEvent.AddressApartmentNumber != null)
    {
    <p>@selectedEvent.AddressStreetName @selectedEvent.AddressStreetNumber, @selectedEvent.AddressApartmentNumber</p>
        
    }
    else
    {
    <p>@selectedEvent.AddressStreetName @selectedEvent.AddressStreetNumber</p>
    }
    <p>Category: @category.Name </p>
    if (username.Equals(selectedEvent.Organizer))
    {
        <p class="actions">
            <button @onclick="@EditEventAsync" class="btn btn-outline-secondary" type="submit"><i class="oi oi-pencil"></i> Edit</button>
        </p>
    }

    <br/>
    <div class="col-sm-6">
        <h3>Participants: @participants.Count/@selectedEvent.MaxNumberOfParticipants</h3>
        @foreach (var participant in participants)
        {
            <ul>
                <li @onclick="@(() => MoreUserInfo(participant))">@participant</li>
            </ul>
        }
        @if (!username.Equals(selectedEvent.Organizer) && participants.Contains(username) && participants.Count != selectedEvent.MaxNumberOfParticipants)
        {
            <p class="actions">
                <button class="btn btn-outline-danger" type="submit" @onclick="@WithdrawEvent">Withdraw</button>
            </p>
        }
        else if (!username.Equals(selectedEvent.Organizer) && participants.Count == selectedEvent.MaxNumberOfParticipants)
        {
            <p class="actions">
                <button class="btn btn-secondary btn-lg" type="submit" disabled>Join</button>
            </p>
        }
        else if (!username.Equals(selectedEvent.Organizer))
        {
            <p class="actions">
                <button class="btn btn-outline-success" type="submit" @onclick="@JoinEvent">Join</button>
            </p>
        }
        </div>
    
    <div class="mb-2">
        <h3>Organizers</h3>
        @foreach (var organizer in organizers)
        {
            <ul>
                @if (organizer.Equals(selectedEvent.Organizer))
                {
                    <li>
                        <b @onclick="@(() => MoreUserInfo(organizer))">@organizer</b>
                    </li>
                }
                else
                {
                    <li @onclick="@(() => MoreUserInfo(organizer))">@organizer</li>
                }
            </ul>
        }
        <AuthorizeView Policy="Organizer">
            @if (participants.Contains(username))
            {
                if (!username.Equals(selectedEvent.Organizer) && organizers.Contains(username))
                {
                    <p class="actions">
                        <button class="btn btn-outline-danger" type="submit" @onclick="@WithdrawEventAsCoOrganizer">Withdraw</button>
                    </p>
                }
                else if (!username.Equals(selectedEvent.Organizer))
                {
                    <p class="actions">
                        <button class="btn btn-outline-success" type="submit" @onclick="@CoOrganizeEvent">Co-Organize</button>
                    </p>
                }
            }
        </AuthorizeView>
    </div>

    <br/><h3>Games</h3>
    foreach (var game in allEventGameList)
    {
        <ul>
            <li @onclick="@(() => MoreGameInfo(game.Id))"><a href="#">@game.Name</a></li>
        </ul>
    }
    
    if (username.Equals(selectedEvent.Organizer))
    {
        <br/><p class="actions">
            <button class="btn btn-outline-danger" type="submit" @onclick="@CancelEvent">Cancel</button>
        </p>
    }
}

@code {

    [Parameter]
    public int Id { get; set; }

    private Event selectedEvent = new();
    private IList<string> participants = new List<string>();
    private IList<string> organizers = new List<string>();
    private IList<Category> categories = new List<Category>();
    private Category category = new();
    private IList<Game> allEventGameList = new List<Game>();
    private string username;

    protected override async Task OnInitializedAsync()
    {
        username = ((CustomAuthenticationStateProvider) Auth).GetAuthenticationStateAsync().Result.User.FindFirst(claim => claim.Type.Equals(ClaimTypes.Name))?.Value;
        categories = await categoryService.GetCategoriesAsync();
        allEventGameList = await eventGameListService.GetAllEventGameListAsync(Id);
        selectedEvent = await eventService.GetEventAsync(Id);
        participants = await participantService.GetParticipantsAsync(Id);
        organizers = await organizerService.GetOrganizersAsync(Id);
        category = categories.FirstOrDefault(a => a.Id == selectedEvent.EventCategory);
    }

    private async Task JoinEvent()
    {
        await participantService.JoinEvent(Id, username);
        participants = await participantService.GetParticipantsAsync(Id);
    }

    private async Task WithdrawEvent()
    {
        await participantService.WithdrawEvent(Id, username);
        participants = await participantService.GetParticipantsAsync(Id);
        organizers = await organizerService.GetOrganizersAsync(Id);
    }

    private async Task CoOrganizeEvent()
    {
        await organizerService.CoOrganizeEvent(Id, username);
        organizers = await organizerService.GetOrganizersAsync(Id);
    }

    private async Task WithdrawEventAsCoOrganizer()
    {
        await organizerService.WithdrawEvent(Id, username);
        organizers = await organizerService.GetOrganizersAsync(Id);
    }
    
    private async Task CancelEvent()
    {
        await eventService.CancelEvent(selectedEvent);
        NavigationManager.NavigateTo("MyEvents");
    }
    
    private async Task EditEventAsync()
    {
        NavigationManager.NavigateTo($"EditEvent/{selectedEvent.Id}");
    }
    
    private async Task MoreGameInfo(int id)
    {
        NavigationManager.NavigateTo($"GameInfo/{id}");
    }

    private async Task MoreUserInfo(string username)
    {
        NavigationManager.NavigateTo($"UserInfo/{username}");
    }
}