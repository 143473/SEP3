@page "/EventInfo/{Id:int}"
@using Presentation_Layer.Models
@using Presentation_Layer.Data
@using Presentation_Layer.Authentication
@using System.Security.Claims

@inject IParticipantService participantService;
@inject IOrganizerService organizerService;
@inject IEventService eventService;
@inject ICategoryService categoryService;
@inject IEventGameListService eventGameListService;
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider Auth

@if (categories.Count == 0)
{
    <div class="spinner"></div>
}
else
{
<h3>@selectedEvent.Name</h3>

<p>Time: @selectedEvent.StartTime - @selectedEvent.EndTime</p>
@if (selectedEvent.AddressApartmentNumber != null)
                {
                    <p>@selectedEvent.AddressStreetName @selectedEvent.AddressStreetNumber, @selectedEvent.AddressApartmentNumber</p>
                }
                else
                {
                    <p>@selectedEvent.AddressStreetName @selectedEvent.AddressStreetNumber</p>
                }<p>Category: @category.Name </p>

<h3>Organizers</h3>
@foreach (var organizer in organizers)
{
    <ul>
        @if (organizer.Equals(selectedEvent.Organizer))
        {
            <li><b>@organizer</b></li>
        }
        else
        {
            <li>@organizer</li>
        }
    </ul>
}
<h3>Participants: @participants.Count/@selectedEvent.MaxNumberOfParticipants</h3>
@foreach (var participant in participants)
{
    <ul>
        <li>@participant</li>
    </ul>
}
    if (!selectedEvent.Organizer.Equals(username)&& participants.Count!= selectedEvent.MaxNumberOfParticipants)
    {
        if (participants.Contains(username) && participants.Count!= selectedEvent.MaxNumberOfParticipants)
        {
            <p class="actions">
                <button class="btn btn-outline-danger" type="submit" @onclick="@WithdrawEvent">Withdraw</button>
            </p>
        }
        else if (participants.Count == selectedEvent.MaxNumberOfParticipants)
        {
            <p class="actions">
                <button class="btn btn-outline-secondary" type="submit" @onclick="@JoinEvent" disabled>Join</button>
            </p>
        }
        else
        {
            <p class="actions">
                <button class="btn btn-outline-success" type="submit" @onclick="@JoinEvent">Join</button>
            </p>
        }
    }

    <h3>Games</h3>
@foreach (Game game in allEventGameList)
{
    <ul>
        <li>@game.Name</li>
    </ul>
}
    
}

@code {
    [Parameter] public int Id { get; set; }
    private Event selectedEvent = new Event();
    private IList<string> participants = new List<string>();
    private IList<string> organizers = new List<string>();
    private IList<Category> categories = new List<Category>();
    private Category category = new Category();
    private IList<Game> allEventGameList = new List<Game>();
    string username;
    
    protected override async Task OnInitializedAsync()
    {
        username = ((CustomAuthenticationStateProvider) Auth).GetAuthenticationStateAsync().Result.User.FindFirst(claim => claim.Type.Equals(ClaimTypes.Name))?.Value;
        categories = await categoryService.GetCategoriesAsync();
        allEventGameList = await eventGameListService.GetAllEventGameListAsync(Id);
        selectedEvent = await eventService.GetEventAsync(Id);
        participants = await participantService.GetParticipantsAsync(Id);
        organizers = await organizerService.GetOrganizersAsync(Id);
        category =  categories.FirstOrDefault(a => a.Id == selectedEvent.EventCategory);
    }
    
    private async Task JoinEvent()
    {
        await participantService.JoinEvent(Id, username);
        participants = await participantService.GetParticipantsAsync(Id);
    }

    private async Task WithdrawEvent()
    {
        await participantService.WithdrawEvent(Id, username);
        participants = await participantService.GetParticipantsAsync(Id);
    }
}